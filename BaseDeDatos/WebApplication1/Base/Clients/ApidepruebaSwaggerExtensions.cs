// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace swagger
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for ApidepruebaSwagger.
    /// </summary>
    public static partial class ApidepruebaSwaggerExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static string ApiTemporadaGet(this IApidepruebaSwagger operations)
            {
                return operations.ApiTemporadaGetAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> ApiTemporadaGetAsync(this IApidepruebaSwagger operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTemporadaGetWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiTemporadaPost(this IApidepruebaSwagger operations, string value = default(string))
            {
                operations.ApiTemporadaPostAsync(value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemporadaPostAsync(this IApidepruebaSwagger operations, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemporadaPostWithHttpMessagesAsync(value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Obtiene un equipo mediante un ID especifico
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id del Equipo
            /// </param>
            public static IList<EquipoEntity> ApiTemporadaByIdGet(this IApidepruebaSwagger operations, int id)
            {
                return operations.ApiTemporadaByIdGetAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Obtiene un equipo mediante un ID especifico
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Id del Equipo
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<EquipoEntity>> ApiTemporadaByIdGetAsync(this IApidepruebaSwagger operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ApiTemporadaByIdGetWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            public static void ApiTemporadaByIdPut(this IApidepruebaSwagger operations, int id, string value = default(string))
            {
                operations.ApiTemporadaByIdPutAsync(id, value).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='value'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemporadaByIdPutAsync(this IApidepruebaSwagger operations, int id, string value = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemporadaByIdPutWithHttpMessagesAsync(id, value, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static void ApiTemporadaByIdDelete(this IApidepruebaSwagger operations, int id)
            {
                operations.ApiTemporadaByIdDeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task ApiTemporadaByIdDeleteAsync(this IApidepruebaSwagger operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.ApiTemporadaByIdDeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
